#!/usr/bin/env python3

"""
Python-based debian package management system

:Description:
    This software project has no affiliation with Debian's Official apt system.

:Copyright:
    (C) 2015 PeonDevelopments
    (C) 2015 Angry Coders Inc.
    
:TODO:
    - Build package in a temporary build directory so .hidden folders can be
      stripped out without causing version control systems to break. (svn)
    - apt-pkg duplicate [package] [to rename to]
"""

import argparse, sys, os, platform
import datetime
import socket
import shutil
from subprocess import PIPE, Popen
import configparser

# local apt-repo modules
from __init__ import arch_dir, get_arch
import lib.db
import lib.build

from lib.build import SECTIONS

ACTIONS = ["create", "delete", "modify", "add", "remove", "rem", 
           "update", "build", "valid", "info", "licenses", "sections", "help", None]

DEBIAN_FILES = ['postinst', 'postrm', 'preinst', 'prerm', 'control']
# NOTE: Anytime a package is updated, it must update the gpg file

def update_pkg(package_name):
    """
    :Description:
        Take all the steps to update the target debian folder package data
        - Update Install-Size
        - Regenerate control file
        - Re-validate package data
    """
    pass

def remove_svn_dirs(path):
    for dirpath, dirnames, filenames in os.walk(path):
        for dname in dirnames:
            if dname == ".svn":
                print(os.path.join(dirpath, dname))
                shutil.rmtree(os.path.join(dirpath, dname))

def write_into(src, dst, overwrite=True, symlinks=False):
    src = os.path.abspath(src)
    toplevel = src.split(os.sep)[-1]
    target = os.path.join(dst, toplevel)
    if not os.path.exists(target):
        shutil.copytree(src, target, symlinks=symlinks)
    
    else:
        subtarget = target # Initialize before reuse
        print("Directory {} exists...".format(subtarget))
        for dirpath, dirnames, filenames in os.walk(src):
            
            for dname in dirnames:
                subtarget = os.path.join(dst, toplevel, dirpath.split(toplevel)[-1].lstrip(os.sep), dname)
                if not os.path.exists(subtarget):
                    shutil.copytree(os.path.join(dirpath, dname), subtarget, symlinks=symlinks)
                
                else:
                    print("Directory {} exists...".format(subtarget))
            
            for fname in filenames:
                subtarget = os.path.join(dst, toplevel, dirpath.split(toplevel)[-1].strip(os.sep), fname)
                if not os.path.exists(subtarget) or overwrite:
                    shutil.copy2(os.path.join(dirpath, f), subtarget, follow_symlinks=symlinks)
                    
                else:
                    print("File {} exists...".format(subtarget))
                    
def remove_from(dst, name, remove_all=False, find_dirs=True, find_files=True):
    name = name.split(os.sep)[-1]
    retval = False
    for dirpath, dirnames, filenames in os.walk(dst):
        if find_files:
            if name in filenames:
                print("Removing file {}".format(name))
                rem = os.path.join(dirpath, name)
                os.remove(rem)
                retval = True
                if remove_all:
                    continue
                
                else:
                    break
            
        if find_dirs:
            if name in dirnames:
                print("Removing directory {}".format(name))
                rem = os.path.join(dirpath, name)
                shutil.rmtree(rem)
                retval = True
                if remove_all:
                    continue
                
                else:
                    break
            
        else:
            continue
        
    return retval
            
if __name__ == "__main__":

    # --> Start Command Line Argument parsing
    parser = argparse.ArgumentParser(description="Apt Package Management Tool")
    # publish command when invoked as the primary action will read in the transaction file
    # of commands made (add, remove) in chronological order so users can see their changes
    # before they are made live. Config file options can make this automatic, or supply --publish
    # option (-p) to each package command
    parser.add_argument('action', nargs="*",
                       help="Perform an action: create, delete, modify, update, build, valid, info, licenses, help")
    parser.add_argument('--directory', '-d', nargs=1, default=None,
                        help="Specify directory to host debian package data")
    parser.add_argument('--author', nargs='*', default=None,
                        help='Sets the name of the package author(s). Use format "author name <author@email.com>"')
    parser.add_argument('--architecture', '-a', nargs='*', default=[get_arch(platform.machine())],
                        help="Architectures to create repository with; defaults to current arch and source")
    parser.add_argument('--section', nargs=1, default=None,
                        help="Specify section for package to be added to. Run 'apt-pkg sections' for list")
    parser.add_argument('--essential', action="store_true", default=None,
                        help="Specify this arg to make the package essential. Default is False.")
    parser.add_argument('--depends', nargs="*", help="List package names that this package depends on.",
                        default=None)
    parser.add_argument('--recommends', nargs="*", help="List package names that this package recommends.",
                        default=None)
    parser.add_argument('--suggests', nargs="*", help="List package names that this package recommends.",
                        default=None)
    parser.add_argument('--provides', nargs="*", 
                        help="If you set the provides for a package list, its size must equal the number " 
                        "of package names supplied to create action.")
    parser.add_argument('--built-using', nargs='*',
                        help="If you set the built-using for a package list, its size must equal the number " 
                        "of package names supplied to create action. use empty quotes for packages where " 
                        "this doesn't apply")
    parser.add_argument('--maintainer', nargs='*', help="Set the maintainer(s) for all packages in format: " 
                        "'full name <email@this.com>'", default=None)
    parser.add_argument('--homepage', nargs=1, help="Set the homepage in the control file.", default=None)
    parser.add_argument('--license', '-l', nargs=1, help="Specify license to associate with package", default=None)
    parser.add_argument('--set-version', nargs='?', help="Set the version string for all packages to this",
                        default="0.1")
    parser.add_argument('--increment', action='store_true', default=False, help='Increment current version if int or float')
    parser.add_argument('--desc', nargs=1, help="Set the description summary", default="No description set")
    parser.add_argument('--description', nargs='*', help="Set the full description, each line should "
                        "be surrounded in quotes and supplied to this parameter. Ex: " 
                        "--description 'this is a long' 'description of my package'", default=["..."])
    parser.add_argument('--follow-symlinks', action="store_true", help="Allow symlinks to be added into packages",
                         default=False)
    parser.add_argument('--overwrite', action="store_false", default=True,
                        help="Overwrite files when adding to a package, enabled by default.")
    args = parser.parse_args()
    
    action = args.action[0].lower() if len(args.action) > 0 else None
    
    opts = {}
    # FIXME: need locals and global options mixed, locals override globals
    # FIXME: No default values. Only if an argument is specified will it be used, else use db, else sane default
    # Set options with overriding cli arguments:   argument > config file > default value 
    opts['provides'] = args.provides if args.provides else [args.action[1]]
    opts['directory'] = os.path.abspath(args.directory if not args.directory is None else opts.get('directory', os.getcwd()))
    opts['author'] = args.author if args.author else opts.get('author', '').split(',')
    opts['architecture'] = args.architecture if args.architecture else opts.get('architecture', '').split(',')
    opts['section'] = args.section if not args.section is None else opts.get('section', 'misc')
    opts['essential'] = args.essential if not args.essential is None else opts.get('essential', False)
    opts['depends'] = args.depends if not args.depends is None else opts.get('depends', '').split(',')
    opts['suggests'] = args.suggests if not args.suggests is None else opts.get('suggests', '').split(',')
    opts['recommends'] = args.recommends if not args.recommends is None else opts.get('recommends', '').split(',')
    opts['maintainer'] = args.maintainer.split(',') if not args.maintainer is None else opts.get('maintainer', [socket.gethostname()])
    opts['homepage'] = args.homepage if not args.homepage is None else opts.get('homepage', '')
    opts['license'] = args.license if not args.license is None else opts.get('license', '')
    opts['follow-symlinks'] = args.follow_symlinks # FIXME
    opts['overwrite'] = args.overwrite # FIXME
    opts['increment'] = args.increment
    # <-- End Command Line Argument parsing
    
    if not action in ACTIONS:
        sys.stderr.write("Invalid action: {}.\nAvailable actions: {}\n".format(
            action, ', '.join(ACTIONS)))
        sys.exit(1)

    if action == "create":
        for i, pkgname in enumerate(args.action[1:]):
            umask = os.umask(0o022)
            d = os.path.join(opts.get('directory'), pkgname)
            
            if not os.path.exists(d):
                os.makedirs(d, exist_ok=True)
                lib.db.init_package(opts['directory'], pkgname, **opts)
                print("Creating {} Package".format(pkgname))
                
            else:
                if os.path.isfile(d):
                    sys.stderr.write("Warning: Filename collision at {}. Skipping...\n".format(pkgname))
                
                else:
                    sys.stderr.write("Warning: Package {} exists...\n".format(pkgname))
                continue
        
    elif action == "delete":
        for a in args.action[1:]:
            d = os.path.join(opts.get('directory'), a)
            if os.path.exists(d) and os.path.isdir(d):
                # Do a quick check for package confirmation
                if lib.build.apt_repo_pkg(d):
                    umask = os.umask(0o022)
                    print("Removing {} Package".format(a))
                    shutil.rmtree(d)
                    
                else:
                    sys.stderr.write("Warning: Not a Debian Package folder\n")
                    
                    
            else:
                sys.stderr.write("Warning: Directory {} does not exist.\n".format(
                    opts.get('directory')))
                sys.exit(2)
        
    elif action == "modify":
        print("TODO: Go through arguments and modify ones that have changed, or rewrite")
        
    elif action == "add":
        if len(args.action) != 4:
            sys.stderr.write("Adding paths to package needs [path to file] [rel path in package] arguments: {}\n".format(
                args.action[1]))
            sys.exit(8)
        
        copypath = os.path.join(opts.get('directory'), args.action[1])
        if not lib.build.apt_repo_pkg(copypath):
            sys.stderr.write("Not a recognized debian package directory: {}\n".format(
                args.action[1]))
            sys.exit(6)
            
        fs_file = args.action[2]
        rel_path = args.action[3]
        lib.db.update_package(os.path.join(opts.get('directory'), args.action[1]), files={fs_file:rel_path})
        
    elif action.startswith("rem") if not action is None else "":
        if len(args.action) < 2:
            sys.stderr.write("No files specified to be removed from {}\n".format(
                args.action[1]))
            sys.exit(5)
        
        for a in args.action[2:]:
            print("removing {} from {}".format(a, os.path.join(opts.get('directory'), args.action[1])))
            result = remove_from(os.path.join(opts.get('directory'), args.action[1]), a.strip(os.sep))
            if not result:
                sys.stderr.write("Warning: Could not find file or directory {} in {}\n".format(a, args.action[1]))
        
    elif action == "build":
        for a in args.action[1:]:
            d = os.path.join(opts.get('directory'), a)
            if lib.build.apt_repo_pkg(d):
                retcode = lib.build.build_package(opts.get('directory'), a, 
                                        lib.db.read_package(os.path.join(opts.get('directory'), a)))
                if not retcode == 0:
                    sys.stderr.write("Error: Package Building Failed, control file may be bad\n")
                    # TODO: more information
                    sys.exit(7)
                
            else:
                sys.stderr.write("Warning: {} is not a debian package directory.\n".format(d))
        
    elif action == "update":
        for a in args.action[1:]:
            d = os.path.join(opts.get('directory'), a)
            if lib.build.apt_repo_pkg(d):
                remove_svn_dirs(d)
                lib.db.update_package(opts.get('directory'), a, **opts)
                lib.build.write_control_file(a)
                print("Updating {}...".format(a))
                
            else:
                sys.stderr.write("Warning: {} is not a debian package directory.\n".format(d))
        
    elif action == "sections":
        print('\n'.join(SECTIONS))
        
    elif action == "info":
        for a in args.action[1:]:
            print(lib.db.read_package(opts.get('directory'), a))
        
    elif action == "licenses":
        print()
        print("       [main licenses]")
        print("          - GNU General Public License")
        print("          - GNU Lesser General Public License")
        print("          - GNU Library General Public License")
        print("          - Modified BSD License")
        print("          - Perl Artistic License")
        print("          - Apache License")
        print("          - Expat/MIT-style License")
        print("          - zlib-style License")
        print("          - LaTeX Public Project License")
        print("          - Python Software Foundation License")
        print("          - Ruby's License")
        print("          - PHP License")
        print("          - W3C Software Notice and License")
        print("          - OpenSSL License")
        print("          - Sleepycat License")
        print("          - Common Unix Printing System License Agreement")
        print("          - vhf Public License")
        print("          - \"No problem Bugroff\" License")
        print("          - Unmodified BSD License")
        print("          - public domain")
        print("          - IBM Public License Version 1.0")
        print()
        print("       [non-free licenses]")
        print("          - NVIDIA Software License")
        print("          - SCILAB License")
        print("          - Limited Use Software License Agreement")
        print("          - Non-Commercial License")
        print("          - FastCGI / Open Market License")
        print("          - LaTeX2HTML License")
        print("          - Open Publication License")
        print("          - Free Document Dissemination License")
        print("          - AT&T Open Source License")
        print("          - Apple Public Source License")
        print("          - Aladdin Free Public License")
        print("          - Generic amiwm License (an XV-style license)")
        print("          - Digital License Agreement")
        print("          - Moria/Angband License")
        print("          - Unarj License")
        print("          - id Software License")
        print("          - qmail terms")
        print()
    
    elif action == "help":
        print()
        print("apt-pkg program help")
        print("====================")
        print()
        print("apt-repo is a repository-focused script that allows automation of admin tasks.")
        print("The following are actions that can be performed:")
        print()
        print("create: Creates the directory structure for the specified package names.")
        print("        Package names should generally not include version numbers and should")
        print("        only consist of characters, digits and hyphens. Defaults to 'all' arch")
        print("        Names cannot start with digits.")
        print()
        print("delete: ")
        print()
        print("modify: ")
        print()
        print("update: ")
        print()
        print("build:  ")
        print()
        print("valid:  ")
        print()
        print("info:   ")
        print()
        print("licenses: ")
        print()

    elif action is None:
        sys.exit(3)
        

    sys.exit(0)
