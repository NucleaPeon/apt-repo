#!/usr/bin/env python3

"""
Python-based debian repository management system

:Progress:
    o Create action implemented that seems to create the directory structure and
      required files.
      
    o Directory parameter is saved into the configuration file so it can 
      be used to automatically point to the repo provided the config file
      is specified and proper. By default, /etc/apt-repo.d/ is used and
      provided sudo or root privileges are used, no cli args have to be
      specified to continue with any repo action.

:Description:
    This software project has no affiliation with Debian's Official apt system.
    
    Manages and automates a repository with emphasis on the greatest ease of
    automation and control.
    
    This program aims to do as much as possible for the user and automate all
    the small details so the user doesn't have to worry about them. Automate
    gpg and hashes, update them whenever an update is called for, create
    files for all possible scenarios whenever possible -- always create 
    options for source, even if it isn't used.
    
    :create:
        By default, this creates a repository in the current directory with 
        defaults for a stable main repository. 

:Copyright:
    (C) 2015 PeonDevelopments
    (C) 2015 Angry Coders Inc.
"""

import argparse, sys, os, platform
import datetime
import platform
import logging
import socket
import hashlib
import shutil
import json
import glob
import shelve
import configparser
from aptrepo.lib.repos import write_config_file, load_config_file, SUPPORTED_EXTENSIONS, CONF_TO_ARGS, ARGS_TO_CONF, repo_paths, count_supported_packages, package_space_usage, packagelist
from aptrepo.lib.scanpackages import Packages_gz
from aptrepo.lib.arch import arch, get_arch, arch_dir
from aptrepo.lib.security import md5sum_file, gen_gpg_key

def load_paths_for_platform(path_to_platform):
    for f in os.listdir(path_to_platform):
        if os.path.isdir(f):
            yield (f, os.path.join(path_to_platform, f),)
            
            
def create_repo_structure(configpath, platform, args, opts):
    # Create the configuration directory
    if not os.path.exists(args.configdir):
        try:
            print("Creating configuration directory: {}".format(args.configdir))
            os.makedirs(args.configdir, exist_ok=True)
            
        except Exception as E:
            print(E)
            sys.exit(1)
            
        
    # Create the configuration file
    if not os.path.exists(configpath):
        write_config_file(args.configdir, platform, opts)
    
    # Start Create action process
    umask = os.umask(0o022)
    basepath = opts['directory']
    if not os.path.exists(basepath):
        os.makedirs(basepath, exist_ok=True)
        
    # Create pool directories
    for x in opts['restrictions']:
        for y in opts['architecture']:
            os.makedirs(os.path.join(basepath, opts['toplevel'], 'pool', x),
                    exist_ok=True)
            os.makedirs(os.path.join(basepath, opts['toplevel'], 'dists', platform,  x, arch_dir(y)),
                        exist_ok=True)
            
    basepath = os.path.join(basepath, opts['toplevel'], 'dists', platform)
    os.makedirs(basepath, exist_ok=True)
        
    # Before the Release file is created, we need the following files to be created and filled out. TODO
    # RESEARCH THIS NOW
    
    # WRITE RELEASE FILE

    relfiles = ["Packages", "Packages.gz", "Sources", "Sources.gz"]
    with open(os.path.join(basepath, 'Release'), 'w') as f:
        f.write("Origin: {}\n".format(opts.get('name')))
        f.write("Label: {}\n".format(opts.get('name')))
        f.write("Suite: {}\n".format('wheezy'))
        f.write("Codename: {}\n".format('wheezy')) # FIXME
        f.write("Date: {}\n".format(datetime.datetime.strftime(datetime.datetime.now(), "%a, %d %b %Y %H:%M:%S %Z")))
        f.write("Architectures: {}\n".format(' '.join([get_arch(a) for a in opts.get('architecture')])))
        f.write("Components: {}\n".format(' '.join(opts.get('restrictions'))))
        f.write("Description: {}\n".format(opts.get('desc')))
        #f.write("MD5Sum:\n")
        #for x in opts.get('restrictions', ['main']):
        #    for y in relfiles:
        #        if os.path.exists(os.path.join(basepath, x)):
        #            f.write(" {}\n".format(md5sum_file(os.path.join(basepath, platform, x), y)))
                
    # IMPORTANT! GNU GPG requires some work going on in order to generate entropy
    # This is a stop-gap for an important step.
    #        with open(os.path.join(path, 'Release.gpg'), 'w') as f:
    #            f.write("")

    for y in opts.get('restrictions'):
        for z in opts['architecture']:
            z = get_arch(z)
            os.makedirs(os.path.join(basepath, y, arch_dir(z)),
                        exist_ok=True)

            with open(os.path.join(basepath, y, arch_dir(z), "Release"), 'w') as f:
                f.write("Archive: {}\n".format(platform))
                f.write("Origin: {}\n".format(opts.get('name')))
                f.write("Label: {}\n".format(opts.get('name')))
                f.write("Component: {}\n".format(y))
                f.write("Architecture: {}\n".format(z))
                #f.write("Version: 0.1\n")
        
def update_options(args, opts):
    # Update from defaults
    create = False
    for k, v in vars(args).items():
        if k in ["action"]:
            continue
        
        if not v is None:
            opts[k] = v
            
    return opts
        
ACTIONS = ["create", "delete", "update", "info", "add", "remove", "export", "gpg", "haspkg", "help", None]

if __name__ == "__main__":
    '''
    TODO:
        Write Release files with md5sum on Packages{.gz} and Sources{.gz} if applicable
        
    '''
    def format_deb_line(ip,  platform, restrictions, architectures=[arch()], https=False):
        return "deb {} http{}://{}/ {} {}".format("[arch={}]".format(','.join(architectures)),
                                                  "s" if https else "", ip,
                                                 platform, ' '.join(restrictions))
    # --> Start Command Line Argument parsing
    parser = argparse.ArgumentParser(description="Debian Repository Management Tool",
                                     usage="%(prog)s [repo-platform] [action] (cli options)")
    parser.add_argument('action', nargs='*',
                       help="Run 'apt-repo help' to list all the actions")
    parser.add_argument('--desc', nargs='?', 
                        help="Set a repository description")
    parser.add_argument('--configdir', '-c', nargs='?', default=os.path.join(os.sep, 'etc', 'apt-repo.d'),
                        help="Specify directory where repo configuration files are kept")
    parser.add_argument('--directory', '-d', nargs='?', default=None,
                        help="Sets the top level directory for filesystem repositories")
    parser.add_argument('--name', '-n', nargs='?', 
                        help="Sets the account name of the repository")
    parser.add_argument('--email', '-e', nargs='?', 
                        help="Sets the account email address")
    parser.add_argument('--ip', '-i', nargs=1, help="Overrides the auto ip discovering feature")
    parser.add_argument('--gpg', '-g', nargs=1, #"./apt-repo.public.key",
                        help="Exports (and optionally creates) the gpg key to target path and filename") # TODO: Confirm use case of this option
    parser.add_argument('--architecture', '-a', nargs="*", 
                        help="Architectures to create repository with; defaults to current arch and source")
    parser.add_argument('--toplevel', '-t', nargs="?", help="name of top level directory; defaults to 'debian'")
    parser.add_argument('--restrictions', '-r', nargs="*", 
                         help="Package Freedom Restrictions (main, contrib, non-free), defaults to 'main'")
    parser.add_argument('--https', '-s', action="store_true", default=None, # FIXME: This should also take the server key as param to deploy
                        help="Sets the apt address to https instead of http")
    args = parser.parse_args()
    # <-- End Command Line Argument parsing
    platform = args.action[0] if len(args.action) > 0 else None
    action = args.action[1] if len(args.action) > 1 else None
    if len(args.action) < 2:
        raise Exception("Not enough Arguments: apt-repo [platform] [action]")
    
    if action is None:
        raise Exception("Action is required: {}".format(', '.join(
            [str(a) for a in filter(lambda x: not x is None, ACTIONS)])))

    configpath = os.path.join(args.configdir, platform)
    # Set default options
    opts = dict(desc="apt-repo generated repository",
                directory=args.directory if not args.directory is None else os.path.abspath(os.getcwd()),
                name="",
                email="no-reply@localhost.com",
                architecture=[arch()],
                toplevel="debian" if args.toplevel is None else args.toplevel,
                restrictions=['main'],
                https=False)
    
    # Start checking and performing actions
    if action == "create":
        opts = update_options(args, opts)
        path = os.path.join(opts.get('directory'), opts.get('toplevel'), 'dists')
        create_repo_structure(path, platform, args, opts)
    
    elif action == "update":
        # update config file then pass updates onto the repository
        if os.path.exists(os.path.join(args.configdir, platform)):
            db = load_config_file(args.configdir, platform)
            db = update_options(args, db)
            if not args.directory is None:
                create_repo_structure(os.path.join(opts.get('directory'), opts.get('toplevel'), 'dists'), platform, args, opts)
                
            write_config_file(args.configdir, platform, db)
            
            
        else:
            raise Exception("Configuration File not Found")

    elif action == "delete":
        umask = os.umask(0o022)
        opts = load_config_file(args.configdir, platform)
        opts = update_options(args, opts)
        toremove = os.path.join(opts.get('directory'), opts.get('toplevel'))
        print("Removing {}".format(toremove))
        if os.path.exists(toremove):
            shutil.rmtree(toremove)
            
        else:
            raise Exception("Error: Failed to remove non-existant directory: {}\n".format(
                toremove))
        
    elif action == "add":
        opts = load_config_file(args.configdir, platform)
        opts = update_options(args, opts)
        path = os.path.join(opts.get('directory'), opts.get('toplevel'), 'dists', platform)
        # Adds a component to an existing repo.
        packages = args.action[2:]
        modifiedrepos = []
        if os.path.exists(os.path.join(args.configdir, platform)):
            opts = load_config_file(args.configdir, platform)
            
        for p in packages:
            for g in glob.iglob(p):
                if len(g) > 4 and g[-4:] in SUPPORTED_EXTENSIONS:
                    # Get paths for copying package files
                    paths = [os.path.join(path, x) for x in opts['restrictions']]
                    for a in opts['architecture']:
                        for pth in paths:
                            shutil.copyfile(g, os.path.join(pth, arch_dir(a), p.split(os.sep)[-1]))
                            if not pth in modifiedrepos:
                                print("Modified repo: {}".format(pth))
                                modifiedrepos.append(pth)
                                
                            print("Copied {} to {}".format(p, os.path.join(pth, arch_dir(a), p.split(os.sep)[-1])))
                    
        if modifiedrepos:
            for mr in modifiedrepos:
                for a in opts['architecture']:
                    Packages_gz(os.path.join(opts.get('directory'), opts.get('toplevel')), os.path.join('dists', mr, arch_dir(a)))
                
    elif action == "info":
        '''
        INFO:
            - List all the packages that exist in the components specified in the arguments
            - List each component of the repository that exists
            - List total stats of each repo section
            - List the ip address of the repo, list the deb line for the sources file
        '''
        if os.path.exists(configpath):
            opts = load_config_file(args.configdir, platform)
            opts = update_options(args, opts)
            path = os.path.join(opts.get('directory'), opts.get('toplevel'), 'dists')
            output = opts
            output.update(dict(
                repository=dict(
                    {platform: repo_paths(path, platform),
                     "packages": count_supported_packages(path, platform),
                     "totalsize": package_space_usage(path, platform)})))
                    
            print(json.dumps(output, default=str, sort_keys=True, indent=4,
                             separators=(',', ': ',)))
    elif action == "remove":
        packages = args.action[2:]
        modified = []
        opts = load_config_file(args.configdir, platform)
        opts = update_options(args, opts)
        path = os.path.join(opts.get('directory'), opts.get('toplevel'), 'dists')
        if packages:
            for a in opts.get('architecture'):
                a = arch_dir(a)
                pkglist = packagelist(path, platform)
                for rempkg in packages:
                    for r in opts['restrictions']:
                        possiblepkgs = list(set(filter(lambda x: rempkg in x, pkglist)))
                        if len(possiblepkgs) == 1:
                            # TODO: Remove package
                            p = os.path.join(path, platform, r, a)
                            os.remove(os.path.join(p, possiblepkgs[0]))
                            modified.append(p)
                            
                        elif possiblepkgs:
                            # > 1 number of packages in the list
                            print("More than one package matched for removal: [{}]".format(', '.join(possiblepkgs)))
    
        for m in modified:
            Packages_gz(os.path.abspath(os.path.join(path, '..')), m)
            
    elif action == "haspkg":
        opts = load_config_file(args.configdir, platform)
        opts = update_options(args, opts)
        path = os.path.join(opts.get('directory'), opts.get('toplevel'), 'dists')
        pkglist = packagelist(path, platform)
        pkgret = []
        for p in args.action[2:]:
            pkgret.extend(list(filter(lambda x: p in x, pkglist)))
            
        print('\n'.join(pkgret))
    
    elif action == "export":
        opts = load_config_file(args.configdir, platform)
        opts = update_options(args, opts)
        print(format_deb_line(socket.gethostbyname(socket.gethostname()),
                                platform, opts.get('restrictions'), 
                                opts.get('architecture'), https=opts.get('https')))
            
        # TODO: Source repository names
        
    elif action == "help":
        print()
        print("apt-repo program help")
        print("=====================")
        print()
        print("apt-repo is a repository-focused script that allows automation of admin tasks.")
        print("The following are actions that can be performed:")
        print()
        print("create: Creates the repository directory structure and all the necessary files")
        print("        in it to enable the user to connect to, and subsequently update from,")
        print("        an empty repository.")
        print()
        print("        Relevant Options:")
        print("        \to --directory (Specify where to create repository structure")
        print("        \to --desc (Set the Release file description")
        print("        \to --name (Sets the Release account name of the repository)")
        print("        \to --email (Sets the Release email account, usually maintainers'")
        print("        \to --architecture (Create directories for the specified ")
        print("                            architectures")
        print("        \to --toplevel (Top level directory is the suffix to the deb")
        print("                        sources.list")
        print("        \t              line, defaults to 'debian')")
        print("        \to --platforms (Create directories that separate packages")
        print("                         based on stability)")
        print("        \to --restriction (Create directories for free/non-free/")
        print("                           contrib packages.")
        print()
        print("delete: Removes the repository directory structure completely")
        print("        Relevant Options:")
        print()
        print("        \to --directory (Specify where repository is to remove)")
        print()
        print("update: Adds or removes certain components to the repository, such as")
        print("        architectures, platforms, and package restrictions (non-free)")
        print()
        print("        \to --architecure")
        print("        \to --platforms")
        print("        \to --restrictions")
        print("        \to --name")
        print("        \to --email")
        print("        \to --desc")
        print("        \to --directory")
        print("        \to --toplevel")
        print()
        print("info:   ")
        print()
        print("add:   ")
        print()
        print("remove:   ")
        print()
        print("haspkg:   ")
        print()
        
    elif action is None:
        sys.stderr.write("Error: An ACTION was required, but not found.\n")
        sys.exit(3)
            
    
    sys.exit(0)