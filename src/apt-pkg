#!/usr/bin/env python3

"""
Python-based debian package management system

:Description:
    This software project has no affiliation with Debian's Official apt system.

:Copyright:
    (C) 2015 PeonDevelopments
    (C) 2015 Angry Coders Inc.
    
:TODO:
    - Build package in a temporary build directory so .hidden folders can be
      stripped out without causing version control systems to break. (svn)
    - apt-pkg duplicate [package] [to rename to]
"""

import argparse, sys, os
import datetime
import socket
import shutil
from subprocess import PIPE, Popen
import json
# local apt-repo modules
from aptrepo.lib.arch import arch_dir, get_arch, arch
import aptrepo.lib.db
import aptrepo.lib.build

ACTIONS = ["create", "delete", "modify", "add", "remove", "rem", "clean", "override", 
           "update", "build", "valid", "info", "licenses", "sections", "help", 
           "control", "dup", "duplicate"]

DEBIAN_FILES = ['postinst', 'postrm', 'preinst', 'prerm', 'control']

def print_help():
        print()
        print("apt-pkg program help")
        print("====================")
        print()
        print("apt-repo is a repository-focused script that allows automation of admin tasks.")
        print("The following are actions that can be performed:")
        print()
        print("create: Creates the directory structure for the specified package names.")
        print("        Package names should generally not include version numbers and should")
        print("        only consist of characters, digits and hyphens. Defaults to 'all' arch")
        print("        Names cannot start with digits.")
        print()
        print("delete: ")
        print()
        print("modify: ")
        print()
        print("update: ")
        print()
        print("build:  ")
        print()
        print("control: Links the specified file as a control component.")
        print()
        print("         Format: apt-pkg [packagename] control [controlfile] [filepath]")
        print("         Ex: apt-pkg mypackage control postinst /home/user/myscript.sh")
        print()
        print("clean:  Remove all package files (and control files) from the database")
        print()
        print()
        print("valid:  ")
        print()
        print("duplicate: Copies and refactors a package's folder and database to reflect a new name.")
        print()
        print("info:   ")
        print()
        print("licenses: ")
        print()

# NOTE: Anytime a package is updated, it must update the gpg file
            
if __name__ == "__main__":

    # --> Start Command Line Argument parsing
    parser = argparse.ArgumentParser(description="Apt Package Management Tool",
                                     usage="%(prog)s package-name action (optional action args) [cli options]")
    # publish command when invoked as the primary action will read in the transaction file
    # of commands made (add, remove) in chronological order so users can see their changes
    # before they are made live. Config file options can make this automatic, or supply --publish
    # option (-p) to each package command
    parser.add_argument('action', nargs="*", default=None,
                       help="Perform an action: {}".format(', '.join(ACTIONS)))
    parser.add_argument('--directory', '-d', nargs=1, default=os.path.abspath(os.getcwd()),
                        help="Specify directory to host debian package data")
    parser.add_argument('--author', nargs='*',
                        help='Sets the name of the package author(s). Use format "author name <author@email.com>"')
    parser.add_argument('--architecture', '-a', nargs='*',
                        help="Architectures to create repository with; defaults to current arch and source")
    parser.add_argument('--section', nargs=1,
                        help="Specify section for package to be added to. Run 'apt-pkg sections' for list")
    parser.add_argument('--is-essential', action="store_true", default=None,
                        help="Specify this arg to make the package essential. Default is False.")
    parser.add_argument('--depends', nargs="*", help="List package names that this package depends on.")
    parser.add_argument('--recommends', nargs="*", help="List package names that this package recommends.")
    parser.add_argument('--suggests', nargs="*", help="List package names that this package recommends.")
    parser.add_argument('--provides', nargs="*",
                        help="If you set the provides for a package list, its size must equal the number " 
                        "of package names supplied to create action.")
    parser.add_argument('--built-using', nargs='*',
                        help="If you set the built-using for a package list, its size must equal the number " 
                        "of package names supplied to create action. use empty quotes for packages where " 
                        "this doesn't apply")
    parser.add_argument('--maintainer', nargs='*', help="Set the maintainer(s) for all packages in format: " 
                        "'full name <email@this.com>'")
    parser.add_argument('--homepage', nargs=1, help="Set the homepage in the control file.")
    parser.add_argument('--license', '-l', nargs=1, help="Specify license to associate with package")
    parser.add_argument('--set-version', nargs='?', help="Set the version string for all packages to this")
    parser.add_argument('--increment', action='store_true', help='Increment current version if int or float',
                        default=None)
    parser.add_argument('--desc', nargs='?', help="Set the description summary", )
    parser.add_argument('--description', nargs='*', help="Set the full description, each line should "
                        "be surrounded in quotes and supplied to this parameter. Ex: " 
                        "--description 'this is a long' 'description of my package'")
    parser.add_argument('--follow-symlinks', action="store_true", help="Allow symlinks to be added into packages",
                        default=None)
    parser.add_argument('--no-overwrite', action="store_false", default=None,
                        help="Prevents overwriting files when adding to a package | not implemented")
    # TODO: Change log methods
    parser.add_argument('--changelog', '-c', 
                        help="Specify a string that contains an update message to add to the package")
    parser.add_argument('--changelog-file', '-F',
                        help="Specify a file that contains the changelog message.")
    args = parser.parse_args()
    
    
    action = args.action[1].lower() if len(args.action) > 1 else None
    if action is None:
        sys.stderr.write("Required PackageName and Action parameter is missing.\n")
        print_help()
        sys.exit(1)
        
    pkgname = args.action[0]
    
    # Use sane defaults as default arguments or the package database.
    # Only command line paramters that are not None will override these.
    opts = vars(args)
    
    if not isinstance(opts.get('control'), dict):
        # Upgrade from 0.9.3 to 0.9.4 without breaking for control files, remove later
        opts['control'] = {}
        
    if opts.get('override') is None:
        opts['override'] = {}
    
    db = aptrepo.lib.db.PackageDB(opts.get('directory'), pkgname, **opts)
            
    if not action in ACTIONS:
        sys.stderr.write("Invalid action: {}.\nAvailable actions: {}\n".format(
            action, ', '.join(ACTIONS)))
        sys.exit(1)

    if action == "create":
        umask = os.umask(0o022)
        
        if not os.path.exists(os.path.join(opts.get('directory'), pkgname)):
            os.makedirs(os.path.join(opts.get('directory'), pkgname), exist_ok=True)
            opts.update(
                provides=[pkgname.lower()],
                control={},
                directory=os.path.abspath(os.getcwd()),
                is_essential=False,
                author=[],
                override={},
                architecture=[arch()],
                maintainer=[socket.gethostname()],
                files={},
                desc="No description set",
                description=["..."],
                homepage="",
                depends=[],
                recommends=[],
                suggests=[],
                section="misc",
                set_version="0.1")
            db.write(**opts)
            print("Creating {} Package".format(pkgname))
            
        else:
            if os.path.isfile(os.path.join(opts.get('directory'), pkgname)):
                sys.stderr.write("Warning: Filename collision at {}. Skipping...\n".format(pkgname))
            
            else:
                sys.stderr.write("Warning: Package {} exists...\n".format(pkgname))
                
            exit(4)
        
    elif action == "delete":
        d = os.path.join(opts.get('directory'), pkgname)
        if os.path.exists(d) and os.path.isdir(d):
            # Do a quick check for package confirmation
            if db.validate():
                umask = os.umask(0o022)
                print("Removing {} Package".format(pkgname))
                shutil.rmtree(d)
                
            else:
                sys.stderr.write("Warning: Not a Debian Package folder\n")
                
        else:
            sys.stderr.write("Warning: Directory {} does not exist.\n".format(pkgname))
            sys.exit(2)
        
    elif action == "modify":
        print("TODO: Go through arguments and modify ones that have changed, or rewrite")
        
    elif action == "add":
        if len(args.action) != 4:
            sys.stderr.write("Adding paths to package needs [path to file] [rel path in package] arguments: {}\n".format(
                args.action[1]))
            sys.exit(8)
        
        if not aptrepo.lib.db.validate_db(opts.get('directory'), pkgname):
            sys.stderr.write("Not a recognized debian package directory: {}\n".format(
                args.action[1]))
            sys.exit(6)
            
        key = "files"
        db = aptrepo.lib.db.read_keys(opts.get('directory'), pkgname, key)
        correctpath = args.action[2]
        if os.path.isdir(correctpath):
            if not correctpath[-1] == os.sep:
                correctpath = correctpath + os.sep
            
            
        db[key][correctpath] = args.action[3]
        aptrepo.lib.db.write_keys(opts.get('directory'), pkgname, files=db[key])
        
    elif action == "override":
        if len(args.action) != 4:
            sys.stderr.write("Adding paths to package needs [path to file] [rel path in package] arguments: {}\n".format(
                args.action[1]))
            sys.exit(8)
        
        if not aptrepo.lib.db.validate_db(opts.get('directory'), pkgname):
            sys.stderr.write("Not a recognized debian package directory: {}\n".format(
                args.action[1]))
            sys.exit(6)
            
        key = "override"
        db = aptrepo.lib.db.read_keys(opts.get('directory'), pkgname, key)
        if db[key] is None:
            db[key] = {}
            
        correctpath = args.action[2]
        if os.path.isdir(correctpath):
            if not correctpath[-1] == os.sep:
                correctpath = correctpath + os.sep
        
        db[key][correctpath] = args.action[3]
        aptrepo.lib.db.write_keys(opts.get('directory'), pkgname, override=db[key])
        
    elif action.startswith("rem") if not action is None else "":
        if len(args.action) < 2:
            sys.stderr.write("No files specified to be removed from {}\n".format(
                args.action[1]))
            sys.exit(5)
        
        if aptrepo.lib.db.validate_db(opts.get('directory'), pkgname):
            def rem_from_keys(key):
                db = aptrepo.lib.db.read_keys(opts.get('directory'), pkgname, key)
                for rm in args.action[2:]:
                    correctpath = rm
                    if os.path.isdir(correctpath):
                        if not correctpath[-1] == os.sep:
                            correctpath = correctpath + os.sep
                
                    if not db[key].get(correctpath) is None:
                        del db[key][correctpath]
                
                keys = {key: db[key]}
                print("Keys dict: {}".format(keys))
                aptrepo.lib.db.write_keys(opts.get('directory'), pkgname, **keys)
                
            for k in ['files', 'override']:
                rem_from_keys(k)
                
    elif action == "control":
        if len(args.action) < 4:
            sys.stderr.write("Control scripts need a valid script name and path to the file\n")
            sys.stderr.write("See 'apt-pkg help' for more info.\n")
            sys.exit(8)
            
        controlfile = args.action[2]
        controlfilepath = args.action[3]
        
        if not controlfile in DEBIAN_FILES:
            sys.stderr.write("{} is not a valid debian control script name.\n".format(controlfile))
            sys.stderr.write("See 'apt-pkg help' for more info.\n")
            sys.exit(9)
            
        if not os.path.exists(controlfilepath) and os.path.isfile(controlfilepath):
            sys.stderr.write("{} not found or is a directory.\n".format(controlfilepath))
            
        opts['control'][controlfile] = controlfilepath
        aptrepo.lib.db.write_keys(opts.get('directory'), pkgname, control=opts['control'])
    
    elif action == "build":
        if aptrepo.lib.db.validate_db(opts.get('directory'), pkgname):
            db = aptrepo.lib.db.entire_db(opts.get('directory'), pkgname)
            retcode = aptrepo.lib.build.build_package(opts.get('directory'), pkgname, **opts)
            if not retcode == 0:
                sys.stderr.write("Error: Package Building Failed, control file may be bad\n")
                # TODO: more information
                sys.exit(7)
            
        else:
            sys.stderr.write("Warning: {} is not a debian package directory.\n".format(pkgname))
        
    elif action == "update":
        if aptrepo.lib.db.validate_db(opts.get('directory'), pkgname):
            aptrepo.lib.db.write_keys(opts.get('directory'), pkgname, **opts)
            print("Updating {}...".format(pkgname))
            
        else:
            sys.stderr.write("Warning: {} is not a debian package directory.\n".format(opts.get('directory')))
        
    elif action == "sections":
        print('\n'.join(aptrepo.lib.build.SECTIONS))
        
    elif action == "info":
        if aptrepo.lib.db.validate_db(opts.get('directory'), pkgname):
            print(json.dumps(aptrepo.lib.db.entire_db(opts.get('directory'), pkgname), default=str,
                             sort_keys=True,
                             indent=4,
                             separators=(',', ': ',)))
        
    elif action == "clean":
        # Remove all files from a package
        if aptrepo.lib.db.validate_db(opts.get('directory'), pkgname):
            aptrepo.lib.db.write_keys(opts.get('directory'), pkgname, files={}, control={})
            
        else:
            sys.stderr.write("Warning: {} is not a debian package directory.\n".format(d))
            
    elif action.startswith("dup") if not action is None else "":
        if aptrepo.lib.db.validate_db(opts.get('directory'), pkgname):
            umask = os.umask(0o022)
            for d in args.action[2:]:
                if not os.path.exists(os.path.join(opts.get('directory'), d)):
                    os.makedirs(os.path.join(opts.get('directory'), d), exist_ok=True)
                    aptrepo.lib.db.duplicate(opts.get('directory'), pkgname, d, **opts)
                    print("Duplicating {} Package as {}".format(pkgname, d))
        
    elif action == "licenses":
        print()
        print("       [main licenses]")
        print("          - GNU General Public License")
        print("          - GNU Lesser General Public License")
        print("          - GNU Library General Public License")
        print("          - Modified BSD License")
        print("          - Perl Artistic License")
        print("          - Apache License")
        print("          - Expat/MIT-style License")
        print("          - zlib-style License")
        print("          - LaTeX Public Project License")
        print("          - Python Software Foundation License")
        print("          - Ruby's License")
        print("          - PHP License")
        print("          - W3C Software Notice and License")
        print("          - OpenSSL License")
        print("          - Sleepycat License")
        print("          - Common Unix Printing System License Agreement")
        print("          - vhf Public License")
        print("          - \"No problem Bugroff\" License")
        print("          - Unmodified BSD License")
        print("          - public domain")
        print("          - IBM Public License Version 1.0")
        print()
        print("       [non-free licenses]")
        print("          - NVIDIA Software License")
        print("          - SCILAB License")
        print("          - Limited Use Software License Agreement")
        print("          - Non-Commercial License")
        print("          - FastCGI / Open Market License")
        print("          - LaTeX2HTML License")
        print("          - Open Publication License")
        print("          - Free Document Dissemination License")
        print("          - AT&T Open Source License")
        print("          - Apple Public Source License")
        print("          - Aladdin Free Public License")
        print("          - Generic amiwm License (an XV-style license)")
        print("          - Digital License Agreement")
        print("          - Moria/Angband License")
        print("          - Unarj License")
        print("          - id Software License")
        print("          - qmail terms")
        print()
    
    elif action == "help":
        print_help()

    elif action is None:
        sys.exit(3)
        

    sys.exit(0)
